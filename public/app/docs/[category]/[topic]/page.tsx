"use client"

import { useState, useEffect, Key } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { useRouter, useParams } from "next/navigation"
import Link from "next/link"
import { Navbar } from "@/components/navbar"
import { LoadingScreen } from "@/components/loading-screen"
import { MinigameCanvas } from "@/components/minigame-canvas"
import { CourseProgress } from "@/components/course-progress"
import { PythonSkillDialog } from "@/components/python-skill-dialog"
import { RichTextRenderer } from "@/components/rich-text-renderer"
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome"
import { faTimes, faCode, faArrowRight, faCheck, faBook, faBars } from "@fortawesome/free-solid-svg-icons"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { getCourseInfo, getUserProfile, setCourseTopicIndex, getCategoryInfo } from "@/lib/api"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { CodeMirrorEditorV2 } from "@/components/code-mirror-editor-v2"
import Image from "next/image"
import { CodeGameCard } from "@/components/gameproblem"
import { ExCodeCard } from "@/components/examplecode"

// const sidebarItems = [
//   {key: "intro", label:"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Python!", category: "basics", id: 1},
//   {key: "datatypes", label:"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", category: "basics", id: 2},
//   {key: "syntax", label:"‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå", category: "basics", id: 3},
//   {key: "operators", label:"‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", category: "basics", id: 4},
//   {key: "numbers", label:"‡πÄ‡∏•‡∏Ç", category: "basics", id: 5},
//   {key: "strings", label:"‡∏™‡∏ï‡∏£‡∏¥‡∏á", category: "basics", id: 6},
//   {key: "variables", label:"‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£", category: "basics", id: 7},
//   {key: "arrays", label:"‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå", category: "basics", id: 8},
//   {key: "conditionals", label:"‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç", category: "basics", id: 9},
//   {key: "loops", label:"‡∏•‡∏π‡∏õ", category: "basics", id: 10},
// ]

type UserType = {
  level: number
  course: number
  isFirstLogin: number
}

// const docContentv2 = {basics:{
//   intro: {
//     title: "üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà üêç Python!",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "paragraph",
//             content: [{ type: "text", text: "üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà üêç Python! ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Python ‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤!" }]
//           },
//           {
//             type: "paragraph",
//             content: [{ type: "text", text: "Python ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£? Python ‡∏Ñ‡∏∑‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å ‡πÜ‡πÜ" }]
//           },
//           {
//             type: "heading",
//             attrs: { level: 3 },
//             content: [{ type: "text", text: "‚ú® ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà Python ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Å‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏Ñ‡∏∑‡∏≠" }]
//           },
//           {
//               type: "bulletList",
//               content: [
//                 {
//                   type: "listItem",
//                   content: [
//                     {
//                       type: "paragraph",
//                       content: [{ type: "text", text: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å ‡πÜ" }]
//                     }
//                   ]
//                 },
//                 {
//                   type: "listItem",
//                   content: [
//                     {
//                       type: "paragraph",
//                       content: [{ type: "text", text: "‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô" }]
//                     }
//                   ]
//                 },
//                 {
//                   type: "listItem",
//                   content: [
//                     {
//                       type: "paragraph",
//                       content: [{ type: "text", text: "‡∏°‡∏µ Library ‡πÅ‡∏•‡∏∞ Framework ‡πÄ‡∏¢‡∏≠‡∏∞ (‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏°‡∏µ‡∏ö‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ)" }]
//                     }
//                   ]
//               },
//             ]
//           },
//           {
//             type: "heading",
//             attrs: { level: 3 },
//             content: [{ type: "text", text: "üìñ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏ö" }]
//           },
//           {
//             type: "bulletList",
//             content: [
//               {
//                 type: "listItem",
//                 content: [
//                   {
//                     type: "paragraph",
//                     content: [{ type: "text", text: "‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏ô‡πà‡∏ô ‡πÜ ‡∏ô‡∏≥‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÑ‡∏î‡πâ‡∏ä‡∏¥‡∏ß ‡πÜ" }]
//                   }
//                 ]
//               },
//               {
//                 type: "listItem",
//                 content: [
//                   {
//                     type: "paragraph",
//                     content: [{ type: "text", text: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Python ‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏ó‡πà ‡πÜ ‡πÄ‡∏•‡∏¢" }]
//                   }
//                 ]
//               },
//             ]
//           },
//           {
//             type: "heading",
//             attrs: {level: 3},
//             content: [{ type: "text", text: "‡πÑ‡∏õ‡∏•‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!!!" }]
//           },
//         ]
//       },
//     ]
//   },
//   datatypes: {
//     title: "üåà ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 3 },
//             content: [ { type: "text", text: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô üêç Python" } ]
//           },
//           {
//             type: "paragraph",
//             content: [ { type: "text", text: "üêç Python ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏ï‡∏£‡∏£‡∏Å‡∏∞ ‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏π‡πà‡∏Ñ‡∏µ‡∏¢‡πå‚Äë‡∏Ñ‡πà‡∏≤" } ]
//           },
//           {
//             type: "bulletList",
//             content: [
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üî¥ int - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡πÄ‡∏ä‡πà‡∏ô 42, -7" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üîµ float - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô 3.14, -0.001" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü° str - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô \"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ\"" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü¢ bool - ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏£‡∏Å‡∏∞ True ‡∏´‡∏£‡∏∑‡∏≠ False" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü£ list - ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô [1, 2, 3]" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "‚ö™ tuple - ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô (1, 2, 3)" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü† set - ‡πÄ‡∏ã‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô {1, 2, 3}" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü§ dict - ‡∏Ñ‡∏π‡πà‡∏Ñ‡∏µ‡∏¢‡πå‚Äë‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô {\"name\": \"Thomas\", \"age\": 15}" } ] } ] }
//             ]
//           },
//           {
//             type: "paragraph",
//             content: [ { type: "text", text: "‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô type() ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏õ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á int(), float(), str() ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô" } ]
//           }
//         ]
//       },
//       {
//         type: "exCode",
//         inputs: [],
//         input: "",
//         output: "4 3.14 True Hello ['A', 'B', 'C']",
//         code: "Num = 4\nPi = 3.14\nFlag = True\nText = \"Hello\"\nLetters = ['A', 'B', 'C']\nprint(Num, Pi, Flag, Text, Letters)",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 4 },
//             content: [ { type: "text", text: "‡∏ó‡∏î‡∏•‡∏≠‡∏á print ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á ‡πÜ" } ]
//           },
//           {
//             type: "paragraph",
//             content: [ { type: "text", text: "</> ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß" } ]
//           }
//         ]
//       }
//     ]
//   },
//   syntax: {
//     title: "‚úçÔ∏è ‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 3 },
//             content: [ { type: "text", text: "‚úçÔ∏è ‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á üêç Python" } ]
//           },
//           {
//             type: "paragraph",
//             content: [ { type: "text", text: "‚úçÔ∏è ‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Syntax) ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤ Python ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" } ]
//           },
//           {
//             type: "bulletList",
//             content: [
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü• ‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (Indentation): ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üüß ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ = ‡πÄ‡∏ä‡πà‡∏ô x = 10" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü® ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ if, elif, else" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü© ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ã‡πâ‡∏≥: ‡πÉ‡∏ä‡πâ for ‡∏´‡∏£‡∏∑‡∏≠ while ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏ô‡∏•‡∏π‡∏õ" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå: ‡πÉ‡∏ä‡πâ print() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•" } ] } ] }
//             ]
//           }
//         ]
//       },
//       {
//         type: "exCode",
//         inputs: [],
//         input: "",
//         output: "",
//         code: "print(\"Hello World!\")\nx = 10\nif x % 2 == 0:\n    print(f'{x} is even')",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 4 },
//             content: [ { type: "text", text: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ if ‡πÅ‡∏•‡∏∞ print()" } ]
//           },
//           {
//             type: "paragraph",
//             content: [ { type: "text", text: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ print() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ if ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ x ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà" } ]
//           }
//         ]
//       },
//       {
//         type: "game",
//         image: "/images/syntax/1.png",
//         inputs: [],
//         input: "",
//         output: "Hello Python",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 4 },
//             content: [ { type: "text", text: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á print() üî§" } ]
//           },
//           {
//             type: "paragraph",
//             content: [ { type: "text", text: "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° \"Hello Python\" ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á print() ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á" } ]
//           },
//         ]
//       }
//     ]
//   },
//   variable: {
//     title: "‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "heading",
//             attrs: {
//               level: 3
//             },
//             content: [{ type: "text", text: "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô Python" }]
//           },
//           {
//             type: "paragraph",
//             content: [{ type: "text", text: "‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤ Python ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤" }]
//           },
//           {
//             type: "paragraph",
//             content: [{ type: "text", text: "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏¥‡∏™‡∏£‡∏∞ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏¢‡∏π‡πà" }]
//           },
//           {
//             type: "codeBlock",
//             attrs: { language: "python" },
//             content: [
//               { type: "text", text: "age = 15\nname = \"Thomas\"\nheight = 172.5\nis_student = True" }
//             ]
//           }
//         ]
//       },
//       {
//         type: "game",
//         image: "/images/variables/1.png",
//         input: "",
//         output: "Win 35 False",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 1 },
//             content: [{ type: "text", text: "‡πÄ‡∏Å‡∏°: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! üß†" }]
//           },
//           {
//             type: "paragraph",
//             content: [{ type: "text", text: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ name ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô \"Win\", age ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 35 ‡πÅ‡∏•‡∏∞ is_student ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô False ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ print ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤" }]
//           },
//           {
//             type: "codeBlock",
//             attrs: { language: "python" },
//             content: [{ type: "text", text: "‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ: print() ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ , ‡πÄ‡∏ä‡πà‡∏ô print(name,age,is_student)" }]
//           }
//         ]
//       }
//     ]
//   },
//   operators: {
//     title: "‚ûï ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 3 },
//             content: [ { type: "text", text: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Python ‚ûï‚ûñ‚úñÔ∏è‚ûó" } ]
//           },
//           {
//             type: "paragraph",
//             content: [ { type: "text", text: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô Python ‡πÄ‡∏ä‡πà‡∏ô +, -, *, /, %, //, ** ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏ß‡∏Å ‡∏•‡∏ö ‡∏Ñ‡∏π‡∏ì ‡∏´‡∏≤‡∏£ ‡∏´‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡πÄ‡∏®‡∏© ‡∏´‡∏≤‡∏£‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á" } ]
//           },
//           {
//             type: "bulletList",
//             content: [
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "‚ûï `+` ‡∏ö‡∏ß‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 2 + 3 ‡πÑ‡∏î‡πâ 5" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "‚ûñ `-` ‡∏•‡∏ö ‡πÄ‡∏ä‡πà‡∏ô 5 - 2 ‡πÑ‡∏î‡πâ 3" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "‚úñÔ∏è `*` ‡∏Ñ‡∏π‡∏ì ‡πÄ‡∏ä‡πà‡∏ô 2 * 4 ‡πÑ‡∏î‡πâ 8" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "‚ûó `/` ‡∏´‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô 10 / 2 ‡πÑ‡∏î‡πâ 5.0" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üü∞ `//` ‡∏´‡∏≤‡∏£‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô 10 // 3 ‡πÑ‡∏î‡πâ 3" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "üßÆ `%` ‡∏´‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô 10 % 3 ‡πÑ‡∏î‡πâ 1" } ] } ] },
//               { type: "listItem", content: [ { type: "paragraph", content: [ { type: "text", text: "‚ö° `**` ‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á ‡πÄ‡∏ä‡πà‡∏ô 2 ** 3 ‡πÑ‡∏î‡πâ 8" } ] } ] }
//             ]
//           }
//         ]
//       },
//       {
//         type: "exCode",
//         inputs: [],
//         input: "",
//         output: "",
//         // code: "x = 4\ny = 5\nprint(\"‡∏ú‡∏•‡∏£‡∏ß‡∏° =\", x + y)\nprint(\"‡∏Å‡∏≥‡∏•‡∏±‡∏á =\", x ** 2)",
//         code:`x = 4
// y = 5
// print("Sum =", x + y)
// print("Square =", x ** 2)`,
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 4 },
//             content: [ { type: "text", text: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ + ‡πÅ‡∏•‡∏∞ **" } ]
//           },
//         ]
//       },
//       {
//         type: "game",
//         image: "/images/operators/1.png",
//         inputs: [],
//         input: "",
//         output: "231304695889",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 4 },
//             content: [ { type: "text", text: "‡πÄ‡∏Å‡∏°: ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ Python üß†" } ]
//           },
//           {
//             type: "paragraph",
//             content: [ { type: "text", text: "‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç 121 ‡∏ö‡∏ß‡∏Å 232 ‡∏Ñ‡∏π‡∏ì 999 ‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á 3 ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ print()" } ]
//           },
//           {
//             type: "codeBlock",
//             attrs: { language: "python" },
//             content: [{ type: "text", text: "‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ: ‡∏≠‡∏¢‡πà‡∏≤‡∏Ñ‡∏¥‡∏î‡πÄ‡∏≠‡∏á ‡∏°‡∏±‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Python!" }]
//           }
//         ]
//       }
//     ]
//   },
//   condition: {
//     title: "üß© ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 3 },
//             content: [{ type: "text", text: "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô üêç Python" }]
//           },
//           {
//             type: "paragraph",
//             content: [
//               { type: "text", text: "‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤ ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50 ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 50 ‡πÉ‡∏´‡πâ‡∏ï‡∏Å" }
//             ]
//           },
//           {
//             type: "paragraph",
//             content: [
//               { type: "text", text: "üß© " },
//               { type: "text", marks: [{ type: "bold" }], text: "if" },
//               { type: "text", text: " ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà" }
//             ]
//           },
//           {
//             type: "paragraph",
//             content: [
//               { type: "text", text: "üîÅ " },
//               { type: "text", marks: [{ type: "bold" }], text: "elif" },
//               { type: "text", text: " ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏´‡∏≤‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á" }
//             ]
//           },
//           {
//             type: "paragraph",
//             content: [
//               { type: "text", text: "üõë " },
//               { type: "text", marks: [{ type: "bold" }], text: "else" },
//               { type: "text", text: " ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" }
//             ]
//           }
//         ]
//       },
//       {
//         type: "exCode",
//         inputs: [],
//         input: "",
//         output: "",
//         code: `score = 70

// if score >= 80:
//   print("A")
// elif score >= 70:
//   print("B")
// elif score >= 60:
//   print("C")
// else:
//   print("Better Luck Next Time!")`,
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 3 },
//             content: [{ type: "text", text: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ if-elif-else" }]
//           },
//           {
//             type: "paragraph",
//             content: [
//               { type: "text", text: "‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Å‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ " },
//               { type: "text", marks: [{ type: "code" }], text: "score" },
//               { type: "text", text: " ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡∏î‡∏π‡∏™‡∏¥‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏£‡∏î‡∏≠‡∏∞‡πÑ‡∏£ üéì" }
//             ]
//           }
//         ]
//       },
//       {
//         type: "game",
//         image: "/images/intro/2.jpg",
//         inputs: [],
//         input: "",
//         output: "",
//         content: [
//           {
//             type: "heading",
//             attrs: { level: 3 },
//             content: [{ type: "text", text: "‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á!" }]
//           },
//           {
//             type: "paragraph",
//             content: [
//               { type: "text", text: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ " },
//               { type: "text", marks: [{ type: "code" }], text: "age" },
//               { type: "text", text: " ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡πà‡∏≤:" }
//             ]
//           },
//           {
//             type: "paragraph",
//             content: [
//               { type: "text", text: "- ‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 13 ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ " },
//               { type: "text", marks: [{ type: "code" }], text: "‡πÄ‡∏î‡πá‡∏Å" }
//             ]
//           },
//           {
//             type: "paragraph",
//             content: [
//               { type: "text", text: "- ‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 20 ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ " },
//               { type: "text", marks: [{ type: "code" }], text: "‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô" }
//             ]
//           },
//           {
//             type: "paragraph",
//             content: [
//               { type: "text", text: "- ‡∏´‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ " },
//               { type: "text", marks: [{ type: "code" }], text: "‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà" }
//             ]
//           },
//           {
//             type: "codeBlock",
//             attrs: { language: "python" },
//             content: [{ type: "text", text: "" }]
//           }
//         ]
//       }
//     ]
//   },
//   numbers: {
//     title: "‡πÄ‡∏•‡∏Ç",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "heading",
//             attrs: {
//               level: 3
//             },
//             content: [{ type: "text", text: "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô Python" }]
//           },
//           {
//             type: "paragraph",
//             content: [{ type: "text", text: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô Python ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á int ‡πÅ‡∏•‡∏∞ float" }]
//           },
//         ]
//       }
//     ]
//   },
//   strings: {
//     title: "‡∏™‡∏ï‡∏£‡∏¥‡∏á",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "heading",
//             attrs: {
//               level: 3
//             },
//             content: [{ type: "text", text: "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÉ‡∏ô Python" }]
//           },
//           {
//             type: "paragraph",
//             content: [{ type: "text", text: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÉ‡∏ô Python ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô string methods" }]
//           },
//         ]
//       }
//     ]
//   },
//   arrays: {
//     title: "‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "heading",
//             attrs: {
//               level: 3
//             },
//             content: [{ type: "text", text: "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÉ‡∏ô Python" }]
//           },
//           {
//             type: "paragraph",
//             content: [{ type: "text", text: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ list ‡πÅ‡∏•‡∏∞ array ‡πÉ‡∏ô Python" }]
//           },
//         ]
//       }
//     ]
//   },
//   loops: {
//     title: "‡∏•‡∏π‡∏õ",
//     content: [
//       {
//         type: "doc",
//         content: [
//           {
//             type: "heading",
//             attrs: {
//               level: 3
//             },
//             content: [{ type: "text", text: "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏•‡∏π‡∏õ‡πÉ‡∏ô Python" }]
//           },
//           {
//             type: "paragraph",
//             content: [{ type: "text", text: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ for loop ‡πÅ‡∏•‡∏∞ while loop ‡πÉ‡∏ô Python" }]
//           },
//         ]
//       }
//     ]
//   },
// }}

const courseMapping: Record<string, number> = {}
const topicMapping: Record<number, string> = {}

export default function DocTopicPage() {
  const [isLoading, setIsLoading] = useState(true)
  const [user, setUser] = useState<UserType | null>(null)
  const [completedCourses, setCompletedCourses] = useState<number[]>([])
  const [showLevelDialog, setShowLevelDialog] = useState(false)
  const [courseCompleted, setCourseCompleted] = useState(false)
  const [isSidebarOpen, setIsSidebarOpen] = useState(false)
  const [documentationContent, setDocumentationContent] = useState(null)
  const [sidebarItems, setSidebarItems] = useState([])

  const router = useRouter()
  const params = useParams()

  const category = params?.category as string ?? ""
  const topic = params?.topic as string ?? ""

  useEffect(() => {
    async function fetchUserData() {
      try {
      const userData = await getUserProfile()
      if (!userData) return
      setUser(userData)

      const sidebarData = await getCategoryInfo(category)
      setSidebarItems(sidebarData)

      if (userData.skillLevel === 0) {
        console.log("You haven't selected your skill level yet. returning back to /docs.")
        router.push("/docs")
        return
      }

      sidebarData.forEach((info: { key: string; id: number }) => {
        courseMapping[info.key] = info.id
        topicMapping[info.id] = info.key
      })

        // console.log(docContent)
        const catContent = await getCourseInfo(category)
        const docContent = {[category.toString()]: catContent}
        // const docContent = docContentv2
        // console.log(docContent)
        setDocumentationContent(docContent)
        const completedAmount = userData.courseProgress[category]
        
        const unlockedCourses = Object.entries(courseMapping)
          .filter(([_, id]) => id <= completedAmount)
          .map(([_, id]) => id)

        setCompletedCourses(unlockedCourses)
      } catch (error) {
        console.error("Error fetching user data:", error)
      } finally {
        setIsLoading(false)
      }
    }

    fetchUserData()
    setIsSidebarOpen(true)
  }, [])

  if (isLoading) {
    return <LoadingScreen />
  }

  const content =
    documentationContent[category as keyof typeof documentationContent]?.[
      topic as keyof typeof documentationContent.basics
    ]

  if (!content) {
    router.push("/docs")
    return null
  }

  const currentCourseId = courseMapping[topic] || 0
  const isCourseCompleted = completedCourses.includes(currentCourseId)
  const shouldShowMinigame = user && user.level !== 3 && currentCourseId && !isCourseCompleted

  const canAccessCourse = (courseId: number) => {
    const completed = user.courseProgress[category]
    return courseId <= completed + 1
  }

  const getNextCourse = () => {
    const nextTopic = topicMapping[currentCourseId + 1]
    return { category: "basics", topic: nextTopic }
  }

  const handleCourseComplete = async () => {
    if (!user) return
    const newCompleted = [...completedCourses, currentCourseId]
    setCompletedCourses(newCompleted)
    setCourseCompleted(true)

    try {
      await setCourseTopicIndex(category,currentCourseId)
    } catch (error) {
      console.error("Error updating course:", error)
    }
  }

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen)
  }

  const closeSidebarOnClick = () => {
    setIsSidebarOpen(false)
  }

  const renderContent = (contentItem: any, index: number) => {
    if (contentItem.type === "doc") {
      return (
        <div key={index} className="prose prose-neutral dark:prose-invert max-w-none mb-8">
          <RichTextRenderer content={{ type: "doc", content: contentItem.content }} />
        </div>
      )
    } else if (contentItem.type === "game") {
      return (
        <div key={index} className="grid grid-cols-1 lg:grid-cols-[1fr_0px] gap-6">
          <CodeGameCard image={contentItem.image} content={contentItem.content} inputs={contentItem.inputs} input = {contentItem.input} output = {contentItem.output}/>
        </div>
      )
    } else if (contentItem.type === "exCode") {
      // console.log("adding excode")
      return (
        <div key={index} className="grid grid-cols-1 lg:grid-cols-[1fr_0px] gap-6">
          <ExCodeCard content={contentItem.content} code={contentItem.code} inputs={contentItem.inputs} input = "" output = "" />
        </div>
      )
    }
    return null
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />

      <div className="flex flex-1 relative">
        {/* Sidebar Toggle Button */}
        <Button
          onClick={toggleSidebar}
          size="sm"
          variant="ghost"
          className="fixed top-20 left-4 z-50 backdrop-blur-sm border border-gray-600/50"
        >
          <FontAwesomeIcon icon={faBars} className="h-4 w-4" />
        </Button>

        {/* Overlay */}
        <AnimatePresence>
          {isSidebarOpen && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="fixed inset-0 bg-black/50 z-40"
              onClick={() => setIsSidebarOpen(false)}
            />
          )}
        </AnimatePresence>

        {/* Left Sidebar */}
        <AnimatePresence>
          {isSidebarOpen && (
            <motion.div
              initial={{ x: -320 }}
              animate={{ x: 0 }}
              exit={{ x: -320 }}
              transition={{ duration: 0.3, ease: "easeInOut" }}
              className="fixed left-0 top-0 h-full w-80 backdrop-blur-sm border-r border-white/20 z-50"
            >
              <div className="p-6 pt-20 overflow-y-auto h-full">
                {/* Close button */}
                <Button
                  onClick={() => setIsSidebarOpen(false)}
                  size="sm"
                  variant="ghost"
                  className="absolute top-4 right-4"
                >
                  <FontAwesomeIcon icon={faTimes} className="h-4 w-4" />
                </Button>

                {user && (
                  <div className="mb-6">
                    <CourseProgress
                      userLevel={user.skillLevel || 0}
                      currentCourse={user.courseProgress[{category}] || 1}
                      completedCourses={completedCourses}
                    />
                  </div>
                )}

                <nav className="space-y-2">
                  {sidebarItems.map((item) => {
                    const canAccess = canAccessCourse(item.id)
                    const isCompleted = completedCourses.includes(item.id)
                    const isCurrent = item.id === (user?.course || 1)

                    return (
                      <Link
                        key={item.key}
                        href={canAccess ? `/docs/${category}/${item.key}` : "#"}
                        onClick={closeSidebarOnClick}
                        className={`block px-4 py-2 rounded-lg transition-colors ${
                          topic === item.key
                            ? "bg-purple-600/20 text-purple-400 border-l-2 border-purple-400"
                            : canAccess
                            ? isCompleted
                              ? "text-green-400 hover:text-green-300 hover:bg-gray-800/50"
                              : isCurrent
                              ? "text-yellow-400 hover:text-yellow-300 hover:bg-gray-800/50"
                              : "text-gray-300 hover:text-white hover:bg-gray-800/50"
                            : "text-gray-600 cursor-not-allowed"
                        }`}
                      >
                        <div className="flex items-center justify-between">
                          <span className="text-sm">{item.label}</span>
                          <div className="flex items-center space-x-1">
                            {isCompleted && (
                              <FontAwesomeIcon icon={faCheck} className="h-3 w-3 text-green-400" />
                            )}
                            <FontAwesomeIcon icon={faBook} className="h-3 w-3 opacity-50" />
                          </div>
                        </div>
                      </Link>
                    )
                  })}
                </nav>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Main Content */}
        <div className="flex-1 relative min-h-0">
          <div className="p-8 lg:p-8 pt-16 lg:pt-8 max-w-6xl mx-auto">
            {/* Breadcrumb */}
            <div className="mb-6">
              <nav className="flex items-center space-x-2 text-sm text-gray-400">
                <span>docs</span>
                <span>{">"}</span>
                <span>{category}</span>
                <span>{">"}</span>
                <span>{content.title}</span>
              </nav>
            </div>

            {/* Title */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              className="mb-8 text-center"
            >
              <h1 className="text-3xl lg:text-5xl font-bold mb-4">{content.title}</h1>
            </motion.div>

            {/* Course Status */}
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className="mb-6 text-center"
            >
              <div className="flex justify-center items-center space-x-2 flex-wrap">
                {isCourseCompleted && (
                  <Badge className="bg-green-500/20 text-green-400 border border-green-500/30">
                    <FontAwesomeIcon icon={faCheck} className="mr-1 h-3 w-3" />
                    ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                  </Badge>
                )}
                <Badge variant="outline" className="text-gray-400 border-gray-600">
                  ‡∏Ñ‡∏≠‡∏£‡πå‡∏™ {currentCourseId}/10
                </Badge>
              </div>
            </motion.div>

            {/* Content */}
            <div className="flex justify-center">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="mb-8 w-full max-w-7xl"
              >
                {content.content?.map((contentItem, index) =>
                  renderContent(contentItem, index)
                )}
              </motion.div>
            </div>

            {/* Complete Course Button */}
            {!isCourseCompleted && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="mb-8 text-center"
              >
                <Button
                  onClick={handleCourseComplete}
                  size="lg"
                  className="bg-green-600 hover:bg-green-700 w-full sm:w-auto"
                >
                  ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™
                  <FontAwesomeIcon icon={faCheck} className="ml-2 h-4 w-4" />
                </Button>
              </motion.div>
            )}

            {/* Next Course Button */}
            {isCourseCompleted && getNextCourse() && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-center"
              >
                <Link href={`/docs/${getNextCourse()?.category}/${getNextCourse()?.topic}`}>
                  <Button
                    size="lg"
                    className="bg-purple-600 hover:bg-purple-700 w-full sm:w-auto"
                  >
                    ‡πÑ‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                    <FontAwesomeIcon icon={faArrowRight} className="ml-2 h-4 w-4" />
                  </Button>
                </Link>
              </motion.div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}